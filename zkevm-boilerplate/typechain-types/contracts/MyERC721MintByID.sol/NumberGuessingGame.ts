/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NumberGuessingGameInterface extends utils.Interface {
  functions: {
    "guess(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "secretNumber()": FunctionFragment;
    "startNewGame()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "guess" | "owner" | "secretNumber" | "startNewGame"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "guess",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "secretNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startNewGame",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "guess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "secretNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewGame",
    data: BytesLike
  ): Result;

  events: {
    "NewGameStarted(address,uint256)": EventFragment;
    "Winner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewGameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
}

export interface NewGameStartedEventObject {
  player: string;
  secretNumber: BigNumber;
}
export type NewGameStartedEvent = TypedEvent<
  [string, BigNumber],
  NewGameStartedEventObject
>;

export type NewGameStartedEventFilter = TypedEventFilter<NewGameStartedEvent>;

export interface WinnerEventObject {
  player: string;
}
export type WinnerEvent = TypedEvent<[string], WinnerEventObject>;

export type WinnerEventFilter = TypedEventFilter<WinnerEvent>;

export interface NumberGuessingGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NumberGuessingGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    guess(
      number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    secretNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    startNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  guess(
    number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  secretNumber(overrides?: CallOverrides): Promise<BigNumber>;

  startNewGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    guess(
      number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    secretNumber(overrides?: CallOverrides): Promise<BigNumber>;

    startNewGame(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewGameStarted(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      secretNumber?: null
    ): NewGameStartedEventFilter;
    NewGameStarted(
      player?: PromiseOrValue<string> | null,
      secretNumber?: null
    ): NewGameStartedEventFilter;

    "Winner(address)"(
      player?: PromiseOrValue<string> | null
    ): WinnerEventFilter;
    Winner(player?: PromiseOrValue<string> | null): WinnerEventFilter;
  };

  estimateGas: {
    guess(
      number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    secretNumber(overrides?: CallOverrides): Promise<BigNumber>;

    startNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    guess(
      number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secretNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startNewGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
